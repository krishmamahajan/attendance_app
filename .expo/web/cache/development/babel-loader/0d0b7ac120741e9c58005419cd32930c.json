{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { WordArray, Hasher } from \"./core/core.js\";\nvar W = [];\nexport var SHA1Algo = function (_Hasher) {\n  _inherits(SHA1Algo, _Hasher);\n\n  var _super = _createSuper(SHA1Algo);\n\n  function SHA1Algo() {\n    _classCallCheck(this, SHA1Algo);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SHA1Algo, [{\n    key: \"_doReset\",\n    value: function _doReset() {\n      this._hash = new WordArray([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);\n    }\n  }, {\n    key: \"_doProcessBlock\",\n    value: function _doProcessBlock(M, offset) {\n      var H = this._hash.words;\n      var a = H[0];\n      var b = H[1];\n      var c = H[2];\n      var d = H[3];\n      var e = H[4];\n\n      for (var i = 0; i < 80; i += 1) {\n        if (i < 16) {\n          W[i] = M[offset + i] | 0;\n        } else {\n          var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n          W[i] = n << 1 | n >>> 31;\n        }\n\n        var t = (a << 5 | a >>> 27) + e + W[i];\n\n        if (i < 20) {\n          t += (b & c | ~b & d) + 0x5a827999;\n        } else if (i < 40) {\n          t += (b ^ c ^ d) + 0x6ed9eba1;\n        } else if (i < 60) {\n          t += (b & c | b & d | c & d) - 0x70e44324;\n        } else {\n            t += (b ^ c ^ d) - 0x359d3e2a;\n          }\n\n        e = d;\n        d = c;\n        c = b << 30 | b >>> 2;\n        b = a;\n        a = t;\n      }\n\n      H[0] = H[0] + a | 0;\n      H[1] = H[1] + b | 0;\n      H[2] = H[2] + c | 0;\n      H[3] = H[3] + d | 0;\n      H[4] = H[4] + e | 0;\n    }\n  }, {\n    key: \"_doFinalize\",\n    value: function _doFinalize() {\n      var data = this._data;\n      var dataWords = data.words;\n      var nBitsTotal = this._nDataBytes * 8;\n      var nBitsLeft = data.sigBytes * 8;\n      dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n      data.sigBytes = dataWords.length * 4;\n\n      this._process();\n\n      return this._hash;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = _get(_getPrototypeOf(SHA1Algo.prototype), \"clone\", this).call(this);\n\n      clone._hash = this._hash.clone();\n      return clone;\n    }\n  }]);\n\n  return SHA1Algo;\n}(Hasher);\nexport var SHA1 = Hasher._createHelper(SHA1Algo);\nexport var HmacSHA1 = Hasher._createHmacHelper(SHA1Algo);","map":{"version":3,"sources":["D:/Krishma_other_pc/react-native_attendance_app/node_modules/react-native-hash/JSHash/lib/sha1.js"],"names":["WordArray","Hasher","W","SHA1Algo","_hash","M","offset","H","words","a","b","c","d","e","i","n","t","data","_data","dataWords","nBitsTotal","_nDataBytes","nBitsLeft","sigBytes","Math","floor","length","_process","clone","call","SHA1","_createHelper","HmacSHA1","_createHmacHelper"],"mappings":"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","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n\r\nimport {\r\n  WordArray,\r\n  Hasher,\r\n} from './core/core.js';\r\n\r\n// Reusable object\r\nconst W = [];\r\n\r\n/**\r\n * SHA-1 hash algorithm.\r\n */\r\nexport class SHA1Algo extends Hasher {\r\n  _doReset() {\r\n    this._hash = new WordArray([\r\n      0x67452301,\r\n      0xefcdab89,\r\n      0x98badcfe,\r\n      0x10325476,\r\n      0xc3d2e1f0,\r\n    ]);\r\n  }\r\n\r\n  _doProcessBlock(M, offset) {\r\n    // Shortcut\r\n    const H = this._hash.words;\r\n\r\n    // Working variables\r\n    let a = H[0];\r\n    let b = H[1];\r\n    let c = H[2];\r\n    let d = H[3];\r\n    let e = H[4];\r\n\r\n    // Computation\r\n    for (let i = 0; i < 80; i += 1) {\r\n      if (i < 16) {\r\n        W[i] = M[offset + i] | 0;\r\n      } else {\r\n        const n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n        W[i] = (n << 1) | (n >>> 31);\r\n      }\r\n\r\n      let t = ((a << 5) | (a >>> 27)) + e + W[i];\r\n      if (i < 20) {\r\n        t += ((b & c) | (~b & d)) + 0x5a827999;\r\n      } else if (i < 40) {\r\n        t += (b ^ c ^ d) + 0x6ed9eba1;\r\n      } else if (i < 60) {\r\n        t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\r\n      } else /* if (i < 80) */ {\r\n        t += (b ^ c ^ d) - 0x359d3e2a;\r\n      }\r\n\r\n      e = d;\r\n      d = c;\r\n      c = (b << 30) | (b >>> 2);\r\n      b = a;\r\n      a = t;\r\n    }\r\n\r\n    // Intermediate hash value\r\n    H[0] = (H[0] + a) | 0;\r\n    H[1] = (H[1] + b) | 0;\r\n    H[2] = (H[2] + c) | 0;\r\n    H[3] = (H[3] + d) | 0;\r\n    H[4] = (H[4] + e) | 0;\r\n  }\r\n\r\n  _doFinalize() {\r\n    // Shortcuts\r\n    const data = this._data;\r\n    const dataWords = data.words;\r\n\r\n    const nBitsTotal = this._nDataBytes * 8;\r\n    const nBitsLeft = data.sigBytes * 8;\r\n\r\n    // Add padding\r\n    dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - (nBitsLeft % 32));\r\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n    data.sigBytes = dataWords.length * 4;\r\n\r\n    // Hash final blocks\r\n    this._process();\r\n\r\n    // Return final computed hash\r\n    return this._hash;\r\n  }\r\n\r\n  clone() {\r\n    const clone = super.clone.call(this);\r\n    clone._hash = this._hash.clone();\r\n\r\n    return clone;\r\n  }\r\n}\r\n\r\n/**\r\n * Shortcut function to the hasher's object interface.\r\n *\r\n * @param {WordArray|string} message The message to hash.\r\n *\r\n * @return {WordArray} The hash.\r\n *\r\n * @static\r\n *\r\n * @example\r\n *\r\n *     var hash = CryptoJS.SHA1('message');\r\n *     var hash = CryptoJS.SHA1(wordArray);\r\n */\r\nexport const SHA1 = Hasher._createHelper(SHA1Algo);\r\n\r\n/**\r\n * Shortcut function to the HMAC's object interface.\r\n *\r\n * @param {WordArray|string} message The message to hash.\r\n * @param {WordArray|string} key The secret key.\r\n *\r\n * @return {WordArray} The HMAC.\r\n *\r\n * @static\r\n *\r\n * @example\r\n *\r\n *     var hmac = CryptoJS.HmacSHA1(message, key);\r\n */\r\nexport const HmacSHA1 = Hasher._createHmacHelper(SHA1Algo);\r\n"]},"metadata":{},"sourceType":"module"}