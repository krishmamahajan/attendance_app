{"ast":null,"code":"import { Hex, CipherParams } from \"./core/core.js\";\nexport var HexFormatter = {\n  stringify: function stringify(cipherParams) {\n    return cipherParams.toString(Hex);\n  },\n  parse: function parse(input) {\n    var ciphertext = Hex.parse(input);\n    return CipherParams.create({\n      ciphertext: ciphertext\n    });\n  }\n};","map":{"version":3,"sources":["D:/Krishma_other_pc/react-native_attendance_with_navigation-master/node_modules/react-native-hash/JSHash/lib/format-hex.js"],"names":["Hex","CipherParams","HexFormatter","stringify","cipherParams","toString","parse","input","ciphertext","create"],"mappings":"AAGA,SACEA,GADF,EACOC,YADP;AAIA,OAAO,IAAMC,YAAY,GAAG;AAc1BC,EAAAA,SAd0B,qBAchBC,YAdgB,EAcF;AACtB,WAAOA,YAAY,CAACC,QAAb,CAAsBL,GAAtB,CAAP;AACD,GAhByB;AA+B1BM,EAAAA,KA/B0B,iBA+BpBC,KA/BoB,EA+Bb;AACX,QAAMC,UAAU,GAAGR,GAAG,CAACM,KAAJ,CAAUC,KAAV,CAAnB;AACA,WAAON,YAAY,CAACQ,MAAb,CAAoB;AAAED,MAAAA,UAAU,EAAVA;AAAF,KAApB,CAAP;AACD;AAlCyB,CAArB","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport {\r\n  Hex, CipherParams,\r\n} from './core/core.js';\r\n\r\nexport const HexFormatter = {\r\n  /**\r\n   * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\r\n   *\r\n   * @param {CipherParams} cipherParams The cipher params object.\r\n   *\r\n   * @return {string} The hexadecimally encoded string.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\r\n   */\r\n  stringify(cipherParams) {\r\n    return cipherParams.toString(Hex);\r\n  },\r\n\r\n  /**\r\n   * Converts a hexadecimally encoded ciphertext string to a cipher params object.\r\n   *\r\n   * @param {string} input The hexadecimally encoded string.\r\n   *\r\n   * @return {CipherParams} The cipher params object.\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   *\r\n   *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\r\n   */\r\n  parse(input) {\r\n    const ciphertext = Hex.parse(input);\r\n    return CipherParams.create({ ciphertext });\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}