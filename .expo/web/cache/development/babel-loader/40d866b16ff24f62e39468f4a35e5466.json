{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Base from \"../Base.js\";\nimport WordArray from \"../WordArray.js\";\nvar X32WordArray = WordArray;\n\nvar X64WordArray = function (_Base) {\n  _inherits(X64WordArray, _Base);\n\n  var _super = _createSuper(X64WordArray);\n\n  function X64WordArray() {\n    var _this;\n\n    var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var sigBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : words.length * 8;\n\n    _classCallCheck(this, X64WordArray);\n\n    _this = _super.call(this);\n    _this.words = words;\n    _this.sigBytes = sigBytes;\n    return _this;\n  }\n\n  _createClass(X64WordArray, [{\n    key: \"toX32\",\n    value: function toX32() {\n      var x64Words = this.words;\n      var x64WordsLength = x64Words.length;\n      var x32Words = [];\n\n      for (var i = 0; i < x64WordsLength; i += 1) {\n        var x64Word = x64Words[i];\n        x32Words.push(x64Word.high);\n        x32Words.push(x64Word.low);\n      }\n\n      return X32WordArray.create(x32Words, this.sigBytes);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = _get(_getPrototypeOf(X64WordArray.prototype), \"clone\", this).call(this);\n\n      clone.words = this.words.slice(0);\n      var words = clone.words;\n      var wordsLength = words.length;\n\n      for (var i = 0; i < wordsLength; i += 1) {\n        words[i] = words[i].clone();\n      }\n\n      return clone;\n    }\n  }]);\n\n  return X64WordArray;\n}(Base);\n\nexport { X64WordArray as default };","map":{"version":3,"sources":["D:/Krishma_other_pc/react-native_attendance_app/node_modules/react-native-hash/JSHash/lib/core/x64-core/X64WordArray.js"],"names":["Base","WordArray","X32WordArray","X64WordArray","words","sigBytes","length","x64Words","x64WordsLength","x32Words","i","x64Word","push","high","low","create","clone","call","slice","wordsLength"],"mappings":";;;;;;;;;;;AAEA,OAAOA,IAAP;AACA,OAAOC,SAAP;AAEA,IAAMC,YAAY,GAAGD,SAArB;;IAQqBE,Y;;;;;AAqBnB,0BAAqD;AAAA;;AAAA,QAAzCC,KAAyC,uEAAjC,EAAiC;AAAA,QAA7BC,QAA6B,uEAAlBD,KAAK,CAACE,MAAN,GAAe,CAAG;;AAAA;;AACnD;AAEA,UAAKF,KAAL,GAAaA,KAAb;AACA,UAAKC,QAAL,GAAgBA,QAAhB;AAJmD;AAKpD;;;;4BAWO;AAEN,UAAME,QAAQ,GAAG,KAAKH,KAAtB;AACA,UAAMI,cAAc,GAAGD,QAAQ,CAACD,MAAhC;AAGA,UAAMG,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,IAAI,CAAzC,EAA4C;AAC1C,YAAMC,OAAO,GAAGJ,QAAQ,CAACG,CAAD,CAAxB;AACAD,QAAAA,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACE,IAAtB;AACAJ,QAAAA,QAAQ,CAACG,IAAT,CAAcD,OAAO,CAACG,GAAtB;AACD;;AAED,aAAOZ,YAAY,CAACa,MAAb,CAAoBN,QAApB,EAA8B,KAAKJ,QAAnC,CAAP;AACD;;;4BAWO;AACN,UAAMW,KAAK,GAAG,6DAAYC,IAAZ,CAAiB,IAAjB,CAAd;;AAGAD,MAAAA,KAAK,CAACZ,KAAN,GAAc,KAAKA,KAAL,CAAWc,KAAX,CAAiB,CAAjB,CAAd;AAJM,UAKEd,KALF,GAKYY,KALZ,CAKEZ,KALF;AAQN,UAAMe,WAAW,GAAGf,KAAK,CAACE,MAA1B;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,WAApB,EAAiCT,CAAC,IAAI,CAAtC,EAAyC;AACvCN,QAAAA,KAAK,CAACM,CAAD,CAAL,GAAWN,KAAK,CAACM,CAAD,CAAL,CAASM,KAAT,EAAX;AACD;;AAED,aAAOA,KAAP;AACD;;;;EA5EuChB,I;;SAArBG,Y","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n\r\nimport Base from '../Base.js';\r\nimport WordArray from '../WordArray.js';\r\n\r\nconst X32WordArray = WordArray;\r\n\r\n/**\r\n * An array of 64-bit words.\r\n *\r\n * @property {Array} words The array of CryptoJS.x64.Word objects.\r\n * @property {number} sigBytes The number of significant bytes in this word array.\r\n */\r\nexport default class X64WordArray extends Base {\r\n  /**\r\n     * Initializes a newly created word array.\r\n     *\r\n     * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\r\n     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.x64.WordArray.create();\r\n     *\r\n     *     var wordArray = CryptoJS.x64.WordArray.create([\r\n     *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n     *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n     *     ]);\r\n     *\r\n     *     var wordArray = CryptoJS.x64.WordArray.create([\r\n     *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n     *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n     *     ], 10);\r\n     */\r\n  constructor(words = [], sigBytes = words.length * 8) {\r\n    super();\r\n\r\n    this.words = words;\r\n    this.sigBytes = sigBytes;\r\n  }\r\n\r\n  /**\r\n     * Converts this 64-bit word array to a 32-bit word array.\r\n     *\r\n     * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     var x32WordArray = x64WordArray.toX32();\r\n     */\r\n  toX32() {\r\n    // Shortcuts\r\n    const x64Words = this.words;\r\n    const x64WordsLength = x64Words.length;\r\n\r\n    // Convert\r\n    const x32Words = [];\r\n    for (let i = 0; i < x64WordsLength; i += 1) {\r\n      const x64Word = x64Words[i];\r\n      x32Words.push(x64Word.high);\r\n      x32Words.push(x64Word.low);\r\n    }\r\n\r\n    return X32WordArray.create(x32Words, this.sigBytes);\r\n  }\r\n\r\n  /**\r\n     * Creates a copy of this word array.\r\n     *\r\n     * @return {X64WordArray} The clone.\r\n     *\r\n     * @example\r\n     *\r\n     *     var clone = x64WordArray.clone();\r\n     */\r\n  clone() {\r\n    const clone = super.clone.call(this);\r\n\r\n    // Clone \"words\" array\r\n    clone.words = this.words.slice(0);\r\n    const { words } = clone;\r\n\r\n    // Clone each X64Word object\r\n    const wordsLength = words.length;\r\n    for (let i = 0; i < wordsLength; i += 1) {\r\n      words[i] = words[i].clone();\r\n    }\r\n\r\n    return clone;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}