{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Base from \"./Base.js\";\nimport Hex from \"./Hex.js\";\n\nvar WordArray = function (_Base) {\n  _inherits(WordArray, _Base);\n\n  var _super = _createSuper(WordArray);\n\n  function WordArray() {\n    var _this;\n\n    var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var sigBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : words.length * 4;\n\n    _classCallCheck(this, WordArray);\n\n    _this = _super.call(this);\n    var typedArray = words;\n\n    if (typedArray instanceof ArrayBuffer) {\n      typedArray = new Uint8Array(typedArray);\n    }\n\n    if (typedArray instanceof Int8Array || typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    }\n\n    if (typedArray instanceof Uint8Array) {\n      var typedArrayByteLength = typedArray.byteLength;\n      var _words = [];\n\n      for (var i = 0; i < typedArrayByteLength; i += 1) {\n        _words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n      }\n\n      _this.words = _words;\n      _this.sigBytes = typedArrayByteLength;\n    } else {\n      _this.words = words;\n      _this.sigBytes = sigBytes;\n    }\n\n    return _this;\n  }\n\n  _createClass(WordArray, [{\n    key: \"toString\",\n    value: function toString() {\n      var encoder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Hex;\n      return encoder.stringify(this);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(wordArray) {\n      var thisWords = this.words;\n      var thatWords = wordArray.words;\n      var thisSigBytes = this.sigBytes;\n      var thatSigBytes = wordArray.sigBytes;\n      this.clamp();\n\n      if (thisSigBytes % 4) {\n        for (var i = 0; i < thatSigBytes; i += 1) {\n          var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n        }\n      } else {\n        for (var _i = 0; _i < thatSigBytes; _i += 4) {\n          thisWords[thisSigBytes + _i >>> 2] = thatWords[_i >>> 2];\n        }\n      }\n\n      this.sigBytes += thatSigBytes;\n      return this;\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp() {\n      var words = this.words,\n          sigBytes = this.sigBytes;\n      words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n      words.length = Math.ceil(sigBytes / 4);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = _get(_getPrototypeOf(WordArray.prototype), \"clone\", this).call(this);\n\n      clone.words = this.words.slice(0);\n      return clone;\n    }\n  }], [{\n    key: \"random\",\n    value: function random(nBytes) {\n      var words = [];\n\n      var r = function r(m_w) {\n        var _m_w = m_w;\n        var _m_z = 0x3ade68b1;\n        var mask = 0xffffffff;\n        return function () {\n          _m_z = 0x9069 * (_m_z & 0xffff) + (_m_z >> 0x10) & mask;\n          _m_w = 0x4650 * (_m_w & 0xffff) + (_m_w >> 0x10) & mask;\n          var result = (_m_z << 0x10) + _m_w & mask;\n          result /= 0x100000000;\n          result += 0.5;\n          return result * (Math.random() > 0.5 ? 1 : -1);\n        };\n      };\n\n      for (var i = 0, rcache; i < nBytes; i += 4) {\n        var _r = r((rcache || Math.random()) * 0x100000000);\n\n        rcache = _r() * 0x3ade67b7;\n        words.push(_r() * 0x100000000 | 0);\n      }\n\n      return new WordArray(words, nBytes);\n    }\n  }]);\n\n  return WordArray;\n}(Base);\n\nexport { WordArray as default };","map":{"version":3,"sources":["D:/Krishma_other_pc/react-native_attendance_app/node_modules/react-native-hash/JSHash/lib/core/WordArray.js"],"names":["Base","Hex","WordArray","words","sigBytes","length","typedArray","ArrayBuffer","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","typedArrayByteLength","_words","i","encoder","stringify","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","Math","ceil","clone","call","slice","nBytes","r","m_w","_m_w","_m_z","mask","result","random","rcache","_r","push"],"mappings":"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","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport Base from './Base.js';\r\nimport Hex from './Hex.js';\r\n\r\n/**\r\n * An array of 32-bit words.\r\n *\r\n * @property {Array} words The array of 32-bit words.\r\n * @property {number} sigBytes The number of significant bytes in this word array.\r\n */\r\nexport default class WordArray extends Base {\r\n  /**\r\n     * Initializes a newly created word array.\r\n     *\r\n     * @param {Array} words (Optional) An array of 32-bit words.\r\n     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.lib.WordArray.create();\r\n     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\r\n     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\r\n     */\r\n  constructor(words = [], sigBytes = words.length * 4) {\r\n    super();\r\n\r\n    let typedArray = words;\r\n    // Convert buffers to uint8\r\n    if (typedArray instanceof ArrayBuffer) {\r\n      typedArray = new Uint8Array(typedArray);\r\n    }\r\n\r\n    // Convert other array views to uint8\r\n    if (\r\n      typedArray instanceof Int8Array\r\n        || typedArray instanceof Uint8ClampedArray\r\n        || typedArray instanceof Int16Array\r\n        || typedArray instanceof Uint16Array\r\n        || typedArray instanceof Int32Array\r\n        || typedArray instanceof Uint32Array\r\n        || typedArray instanceof Float32Array\r\n        || typedArray instanceof Float64Array\r\n    ) {\r\n      typedArray = new Uint8Array(\r\n        typedArray.buffer,\r\n        typedArray.byteOffset,\r\n        typedArray.byteLength,\r\n      );\r\n    }\r\n\r\n    // Handle Uint8Array\r\n    if (typedArray instanceof Uint8Array) {\r\n      // Shortcut\r\n      const typedArrayByteLength = typedArray.byteLength;\r\n\r\n      // Extract bytes\r\n      const _words = [];\r\n      for (let i = 0; i < typedArrayByteLength; i += 1) {\r\n        _words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n      }\r\n\r\n      // Initialize this word array\r\n      this.words = _words;\r\n      this.sigBytes = typedArrayByteLength;\r\n    } else {\r\n      // Else call normal init\r\n      this.words = words;\r\n      this.sigBytes = sigBytes;\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Creates a word array filled with random bytes.\r\n     *\r\n     * @param {number} nBytes The number of random bytes to generate.\r\n     *\r\n     * @return {WordArray} The random word array.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var wordArray = CryptoJS.lib.WordArray.random(16);\r\n     */\r\n  static random(nBytes) {\r\n    const words = [];\r\n\r\n    const r = (m_w) => {\r\n      let _m_w = m_w;\r\n      let _m_z = 0x3ade68b1;\r\n      const mask = 0xffffffff;\r\n\r\n      return () => {\r\n        _m_z = (0x9069 * (_m_z & 0xffff) + (_m_z >> 0x10)) & mask;\r\n        _m_w = (0x4650 * (_m_w & 0xffff) + (_m_w >> 0x10)) & mask;\r\n        let result = ((_m_z << 0x10) + _m_w) & mask;\r\n        result /= 0x100000000;\r\n        result += 0.5;\r\n        return result * (Math.random() > 0.5 ? 1 : -1);\r\n      };\r\n    };\r\n\r\n    for (let i = 0, rcache; i < nBytes; i += 4) {\r\n      const _r = r((rcache || Math.random()) * 0x100000000);\r\n\r\n      rcache = _r() * 0x3ade67b7;\r\n      words.push((_r() * 0x100000000) | 0);\r\n    }\r\n\r\n    return new WordArray(words, nBytes);\r\n  }\r\n\r\n  /**\r\n     * Converts this word array to a string.\r\n     *\r\n     * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\r\n     *\r\n     * @return {string} The stringified word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     var string = wordArray + '';\r\n     *     var string = wordArray.toString();\r\n     *     var string = wordArray.toString(CryptoJS.enc.Utf8);\r\n     */\r\n  toString(encoder = Hex) {\r\n    return encoder.stringify(this);\r\n  }\r\n\r\n  /**\r\n     * Concatenates a word array to this word array.\r\n     *\r\n     * @param {WordArray} wordArray The word array to append.\r\n     *\r\n     * @return {WordArray} This word array.\r\n     *\r\n     * @example\r\n     *\r\n     *     wordArray1.concat(wordArray2);\r\n     */\r\n  concat(wordArray) {\r\n    // Shortcuts\r\n    const thisWords = this.words;\r\n    const thatWords = wordArray.words;\r\n    const thisSigBytes = this.sigBytes;\r\n    const thatSigBytes = wordArray.sigBytes;\r\n\r\n    // Clamp excess bits\r\n    this.clamp();\r\n\r\n    // Concat\r\n    if (thisSigBytes % 4) {\r\n      // Copy one byte at a time\r\n      for (let i = 0; i < thatSigBytes; i += 1) {\r\n        const thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n        thisWords[(thisSigBytes + i) >>> 2]\r\n            |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\r\n      }\r\n    } else {\r\n      // Copy one word at a time\r\n      for (let i = 0; i < thatSigBytes; i += 4) {\r\n        thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\r\n      }\r\n    }\r\n    this.sigBytes += thatSigBytes;\r\n\r\n    // Chainable\r\n    return this;\r\n  }\r\n\r\n  /**\r\n     * Removes insignificant bits.\r\n     *\r\n     * @example\r\n     *\r\n     *     wordArray.clamp();\r\n     */\r\n  clamp() {\r\n    // Shortcuts\r\n    const { words, sigBytes } = this;\r\n\r\n    // Clamp\r\n    words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\r\n    words.length = Math.ceil(sigBytes / 4);\r\n  }\r\n\r\n  /**\r\n     * Creates a copy of this word array.\r\n     *\r\n     * @return {WordArray} The clone.\r\n     *\r\n     * @example\r\n     *\r\n     *     var clone = wordArray.clone();\r\n     */\r\n  clone() {\r\n    const clone = super.clone.call(this);\r\n    clone.words = this.words.slice(0);\r\n\r\n    return clone;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}