{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { WordArray, Hasher } from \"./core/core.js\";\nvar H = [];\nvar K = [];\n\nvar isPrime = function isPrime(n) {\n  var sqrtN = Math.sqrt(n);\n\n  for (var factor = 2; factor <= sqrtN; factor += 1) {\n    if (!(n % factor)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar getFractionalBits = function getFractionalBits(n) {\n  return (n - (n | 0)) * 0x100000000 | 0;\n};\n\nvar n = 2;\nvar nPrime = 0;\n\nwhile (nPrime < 64) {\n  if (isPrime(n)) {\n    if (nPrime < 8) {\n      H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n    }\n\n    K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n    nPrime += 1;\n  }\n\n  n += 1;\n}\n\nvar W = [];\nexport var SHA256Algo = function (_Hasher) {\n  _inherits(SHA256Algo, _Hasher);\n\n  var _super = _createSuper(SHA256Algo);\n\n  function SHA256Algo() {\n    _classCallCheck(this, SHA256Algo);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SHA256Algo, [{\n    key: \"_doReset\",\n    value: function _doReset() {\n      this._hash = new WordArray(H.slice(0));\n    }\n  }, {\n    key: \"_doProcessBlock\",\n    value: function _doProcessBlock(M, offset) {\n      var _H = this._hash.words;\n      var a = _H[0];\n      var b = _H[1];\n      var c = _H[2];\n      var d = _H[3];\n      var e = _H[4];\n      var f = _H[5];\n      var g = _H[6];\n      var h = _H[7];\n\n      for (var i = 0; i < 64; i += 1) {\n        if (i < 16) {\n          W[i] = M[offset + i] | 0;\n        } else {\n          var gamma0x = W[i - 15];\n          var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;\n          var gamma1x = W[i - 2];\n          var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;\n          W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n        }\n\n        var ch = e & f ^ ~e & g;\n        var maj = a & b ^ a & c ^ b & c;\n        var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n        var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n        var t1 = h + sigma1 + ch + K[i] + W[i];\n        var t2 = sigma0 + maj;\n        h = g;\n        g = f;\n        f = e;\n        e = d + t1 | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = t1 + t2 | 0;\n      }\n\n      _H[0] = _H[0] + a | 0;\n      _H[1] = _H[1] + b | 0;\n      _H[2] = _H[2] + c | 0;\n      _H[3] = _H[3] + d | 0;\n      _H[4] = _H[4] + e | 0;\n      _H[5] = _H[5] + f | 0;\n      _H[6] = _H[6] + g | 0;\n      _H[7] = _H[7] + h | 0;\n    }\n  }, {\n    key: \"_doFinalize\",\n    value: function _doFinalize() {\n      var data = this._data;\n      var dataWords = data.words;\n      var nBitsTotal = this._nDataBytes * 8;\n      var nBitsLeft = data.sigBytes * 8;\n      dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n      data.sigBytes = dataWords.length * 4;\n\n      this._process();\n\n      return this._hash;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = _get(_getPrototypeOf(SHA256Algo.prototype), \"clone\", this).call(this);\n\n      clone._hash = this._hash.clone();\n      return clone;\n    }\n  }]);\n\n  return SHA256Algo;\n}(Hasher);\nexport var SHA256 = Hasher._createHelper(SHA256Algo);\nexport var HmacSHA256 = Hasher._createHmacHelper(SHA256Algo);","map":{"version":3,"sources":["D:/Krishma_other_pc/react-native_attendance_with_navigation-master/node_modules/react-native-hash/JSHash/lib/sha256.js"],"names":["WordArray","Hasher","H","K","isPrime","n","sqrtN","Math","sqrt","factor","getFractionalBits","nPrime","W","SHA256Algo","_hash","slice","M","offset","_H","words","a","b","c","d","e","f","g","h","i","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","data","_data","dataWords","nBitsTotal","_nDataBytes","nBitsLeft","sigBytes","floor","length","_process","clone","call","SHA256","_createHelper","HmacSHA256","_createHmacHelper"],"mappings":";;;;;;;;;;;AAEA,SACEA,SADF,EAEEC,MAFF;AAMA,IAAMC,CAAC,GAAG,EAAV;AACA,IAAMC,CAAC,GAAG,EAAV;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,CAAD,EAAO;AACrB,MAAMC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUH,CAAV,CAAd;;AACA,OAAK,IAAII,MAAM,GAAG,CAAlB,EAAqBA,MAAM,IAAIH,KAA/B,EAAsCG,MAAM,IAAI,CAAhD,EAAmD;AACjD,QAAI,EAAEJ,CAAC,GAAGI,MAAN,CAAJ,EAAmB;AACjB,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD,CATD;;AAWA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACL,CAAD;AAAA,SAAQ,CAACA,CAAC,IAAIA,CAAC,GAAG,CAAR,CAAF,IAAgB,WAAjB,GAAgC,CAAvC;AAAA,CAA1B;;AAEA,IAAIA,CAAC,GAAG,CAAR;AACA,IAAIM,MAAM,GAAG,CAAb;;AACA,OAAOA,MAAM,GAAG,EAAhB,EAAoB;AAClB,MAAIP,OAAO,CAACC,CAAD,CAAX,EAAgB;AACd,QAAIM,MAAM,GAAG,CAAb,EAAgB;AACdT,MAAAA,CAAC,CAACS,MAAD,CAAD,GAAYD,iBAAiB,UAACL,CAAD,EAAO,IAAI,CAAX,EAA7B;AACD;;AACDF,IAAAA,CAAC,CAACQ,MAAD,CAAD,GAAYD,iBAAiB,UAACL,CAAD,EAAO,IAAI,CAAX,EAA7B;AAEAM,IAAAA,MAAM,IAAI,CAAV;AACD;;AAEDN,EAAAA,CAAC,IAAI,CAAL;AACD;;AAGD,IAAMO,CAAC,GAAG,EAAV;AAKA,WAAaC,UAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,+BACa;AACT,WAAKC,KAAL,GAAa,IAAId,SAAJ,CAAcE,CAAC,CAACa,KAAF,CAAQ,CAAR,CAAd,CAAb;AACD;AAHH;AAAA;AAAA,oCAKkBC,CALlB,EAKqBC,MALrB,EAK6B;AAEzB,UAAMC,EAAE,GAAG,KAAKJ,KAAL,CAAWK,KAAtB;AAGA,UAAIC,CAAC,GAAGF,EAAE,CAAC,CAAD,CAAV;AACA,UAAIG,CAAC,GAAGH,EAAE,CAAC,CAAD,CAAV;AACA,UAAII,CAAC,GAAGJ,EAAE,CAAC,CAAD,CAAV;AACA,UAAIK,CAAC,GAAGL,EAAE,CAAC,CAAD,CAAV;AACA,UAAIM,CAAC,GAAGN,EAAE,CAAC,CAAD,CAAV;AACA,UAAIO,CAAC,GAAGP,EAAE,CAAC,CAAD,CAAV;AACA,UAAIQ,CAAC,GAAGR,EAAE,CAAC,CAAD,CAAV;AACA,UAAIS,CAAC,GAAGT,EAAE,CAAC,CAAD,CAAV;;AAGA,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9B,YAAIA,CAAC,GAAG,EAAR,EAAY;AACVhB,UAAAA,CAAC,CAACgB,CAAD,CAAD,GAAOZ,CAAC,CAACC,MAAM,GAAGW,CAAV,CAAD,GAAgB,CAAvB;AACD,SAFD,MAEO;AACL,cAAMC,OAAO,GAAGjB,CAAC,CAACgB,CAAC,GAAG,EAAL,CAAjB;AACA,cAAME,MAAM,GAAG,CAAED,OAAO,IAAI,EAAZ,GAAmBA,OAAO,KAAK,CAAhC,KACTA,OAAO,IAAI,EAAZ,GAAmBA,OAAO,KAAK,EADrB,IAEVA,OAAO,KAAK,CAFjB;AAIA,cAAME,OAAO,GAAGnB,CAAC,CAACgB,CAAC,GAAG,CAAL,CAAjB;AACA,cAAMI,MAAM,GAAG,CAAED,OAAO,IAAI,EAAZ,GAAmBA,OAAO,KAAK,EAAhC,KACTA,OAAO,IAAI,EAAZ,GAAmBA,OAAO,KAAK,EADrB,IAEVA,OAAO,KAAK,EAFjB;AAIAnB,UAAAA,CAAC,CAACgB,CAAD,CAAD,GAAOE,MAAM,GAAGlB,CAAC,CAACgB,CAAC,GAAG,CAAL,CAAV,GAAoBI,MAApB,GAA6BpB,CAAC,CAACgB,CAAC,GAAG,EAAL,CAArC;AACD;;AAED,YAAMK,EAAE,GAAIT,CAAC,GAAGC,CAAL,GAAW,CAACD,CAAD,GAAKE,CAA3B;AACA,YAAMQ,GAAG,GAAId,CAAC,GAAGC,CAAL,GAAWD,CAAC,GAAGE,CAAf,GAAqBD,CAAC,GAAGC,CAArC;AAEA,YAAMa,MAAM,GAAG,CAAEf,CAAC,IAAI,EAAN,GAAaA,CAAC,KAAK,CAApB,KAA4BA,CAAC,IAAI,EAAN,GAAaA,CAAC,KAAK,EAA9C,KAAuDA,CAAC,IAAI,EAAN,GAAaA,CAAC,KAAK,EAAzE,CAAf;AACA,YAAMgB,MAAM,GAAG,CAAEZ,CAAC,IAAI,EAAN,GAAaA,CAAC,KAAK,CAApB,KAA4BA,CAAC,IAAI,EAAN,GAAaA,CAAC,KAAK,EAA9C,KAAuDA,CAAC,IAAI,CAAN,GAAYA,CAAC,KAAK,EAAxE,CAAf;AAEA,YAAMa,EAAE,GAAGV,CAAC,GAAGS,MAAJ,GAAaH,EAAb,GAAkB9B,CAAC,CAACyB,CAAD,CAAnB,GAAyBhB,CAAC,CAACgB,CAAD,CAArC;AACA,YAAMU,EAAE,GAAGH,MAAM,GAAGD,GAApB;AAEAP,QAAAA,CAAC,GAAGD,CAAJ;AACAA,QAAAA,CAAC,GAAGD,CAAJ;AACAA,QAAAA,CAAC,GAAGD,CAAJ;AACAA,QAAAA,CAAC,GAAID,CAAC,GAAGc,EAAL,GAAW,CAAf;AACAd,QAAAA,CAAC,GAAGD,CAAJ;AACAA,QAAAA,CAAC,GAAGD,CAAJ;AACAA,QAAAA,CAAC,GAAGD,CAAJ;AACAA,QAAAA,CAAC,GAAIiB,EAAE,GAAGC,EAAN,GAAY,CAAhB;AACD;;AAGDpB,MAAAA,EAAE,CAAC,CAAD,CAAF,GAASA,EAAE,CAAC,CAAD,CAAF,GAAQE,CAAT,GAAc,CAAtB;AACAF,MAAAA,EAAE,CAAC,CAAD,CAAF,GAASA,EAAE,CAAC,CAAD,CAAF,GAAQG,CAAT,GAAc,CAAtB;AACAH,MAAAA,EAAE,CAAC,CAAD,CAAF,GAASA,EAAE,CAAC,CAAD,CAAF,GAAQI,CAAT,GAAc,CAAtB;AACAJ,MAAAA,EAAE,CAAC,CAAD,CAAF,GAASA,EAAE,CAAC,CAAD,CAAF,GAAQK,CAAT,GAAc,CAAtB;AACAL,MAAAA,EAAE,CAAC,CAAD,CAAF,GAASA,EAAE,CAAC,CAAD,CAAF,GAAQM,CAAT,GAAc,CAAtB;AACAN,MAAAA,EAAE,CAAC,CAAD,CAAF,GAASA,EAAE,CAAC,CAAD,CAAF,GAAQO,CAAT,GAAc,CAAtB;AACAP,MAAAA,EAAE,CAAC,CAAD,CAAF,GAASA,EAAE,CAAC,CAAD,CAAF,GAAQQ,CAAT,GAAc,CAAtB;AACAR,MAAAA,EAAE,CAAC,CAAD,CAAF,GAASA,EAAE,CAAC,CAAD,CAAF,GAAQS,CAAT,GAAc,CAAtB;AACD;AAjEH;AAAA;AAAA,kCAmEgB;AAEZ,UAAMY,IAAI,GAAG,KAAKC,KAAlB;AACA,UAAMC,SAAS,GAAGF,IAAI,CAACpB,KAAvB;AAEA,UAAMuB,UAAU,GAAG,KAAKC,WAAL,GAAmB,CAAtC;AACA,UAAMC,SAAS,GAAGL,IAAI,CAACM,QAAL,GAAgB,CAAlC;AAGAJ,MAAAA,SAAS,CAACG,SAAS,KAAK,CAAf,CAAT,IAA8B,QAAS,KAAMA,SAAS,GAAG,EAAzD;AACAH,MAAAA,SAAS,CAAC,CAAGG,SAAS,GAAG,EAAb,KAAqB,CAAtB,IAA4B,CAA7B,IAAkC,EAAnC,CAAT,GAAkDrC,IAAI,CAACuC,KAAL,CAAWJ,UAAU,GAAG,WAAxB,CAAlD;AACAD,MAAAA,SAAS,CAAC,CAAGG,SAAS,GAAG,EAAb,KAAqB,CAAtB,IAA4B,CAA7B,IAAkC,EAAnC,CAAT,GAAkDF,UAAlD;AACAH,MAAAA,IAAI,CAACM,QAAL,GAAgBJ,SAAS,CAACM,MAAV,GAAmB,CAAnC;;AAGA,WAAKC,QAAL;;AAGA,aAAO,KAAKlC,KAAZ;AACD;AAtFH;AAAA;AAAA,4BAwFU;AACN,UAAMmC,KAAK,GAAG,2DAAYC,IAAZ,CAAiB,IAAjB,CAAd;;AACAD,MAAAA,KAAK,CAACnC,KAAN,GAAc,KAAKA,KAAL,CAAWmC,KAAX,EAAd;AAEA,aAAOA,KAAP;AACD;AA7FH;;AAAA;AAAA,EAAgChD,MAAhC;AA8GA,OAAO,IAAMkD,MAAM,GAAGlD,MAAM,CAACmD,aAAP,CAAqBvC,UAArB,CAAf;AAgBP,OAAO,IAAMwC,UAAU,GAAGpD,MAAM,CAACqD,iBAAP,CAAyBzC,UAAzB,CAAnB","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n\r\nimport {\r\n  WordArray,\r\n  Hasher,\r\n} from './core/core.js';\r\n\r\n// Initialization and round constants tables\r\nconst H = [];\r\nconst K = [];\r\n\r\n// Compute constants\r\nconst isPrime = (n) => {\r\n  const sqrtN = Math.sqrt(n);\r\n  for (let factor = 2; factor <= sqrtN; factor += 1) {\r\n    if (!(n % factor)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst getFractionalBits = (n) => ((n - (n | 0)) * 0x100000000) | 0;\r\n\r\nlet n = 2;\r\nlet nPrime = 0;\r\nwhile (nPrime < 64) {\r\n  if (isPrime(n)) {\r\n    if (nPrime < 8) {\r\n      H[nPrime] = getFractionalBits(n ** (1 / 2));\r\n    }\r\n    K[nPrime] = getFractionalBits(n ** (1 / 3));\r\n\r\n    nPrime += 1;\r\n  }\r\n\r\n  n += 1;\r\n}\r\n\r\n// Reusable object\r\nconst W = [];\r\n\r\n/**\r\n * SHA-256 hash algorithm.\r\n */\r\nexport class SHA256Algo extends Hasher {\r\n  _doReset() {\r\n    this._hash = new WordArray(H.slice(0));\r\n  }\r\n\r\n  _doProcessBlock(M, offset) {\r\n    // Shortcut\r\n    const _H = this._hash.words;\r\n\r\n    // Working variables\r\n    let a = _H[0];\r\n    let b = _H[1];\r\n    let c = _H[2];\r\n    let d = _H[3];\r\n    let e = _H[4];\r\n    let f = _H[5];\r\n    let g = _H[6];\r\n    let h = _H[7];\r\n\r\n    // Computation\r\n    for (let i = 0; i < 64; i += 1) {\r\n      if (i < 16) {\r\n        W[i] = M[offset + i] | 0;\r\n      } else {\r\n        const gamma0x = W[i - 15];\r\n        const gamma0 = ((gamma0x << 25) | (gamma0x >>> 7))\r\n          ^ ((gamma0x << 14) | (gamma0x >>> 18))\r\n          ^ (gamma0x >>> 3);\r\n\r\n        const gamma1x = W[i - 2];\r\n        const gamma1 = ((gamma1x << 15) | (gamma1x >>> 17))\r\n          ^ ((gamma1x << 13) | (gamma1x >>> 19))\r\n          ^ (gamma1x >>> 10);\r\n\r\n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\r\n      }\r\n\r\n      const ch = (e & f) ^ (~e & g);\r\n      const maj = (a & b) ^ (a & c) ^ (b & c);\r\n\r\n      const sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\r\n      const sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7) | (e >>> 25));\r\n\r\n      const t1 = h + sigma1 + ch + K[i] + W[i];\r\n      const t2 = sigma0 + maj;\r\n\r\n      h = g;\r\n      g = f;\r\n      f = e;\r\n      e = (d + t1) | 0;\r\n      d = c;\r\n      c = b;\r\n      b = a;\r\n      a = (t1 + t2) | 0;\r\n    }\r\n\r\n    // Intermediate hash value\r\n    _H[0] = (_H[0] + a) | 0;\r\n    _H[1] = (_H[1] + b) | 0;\r\n    _H[2] = (_H[2] + c) | 0;\r\n    _H[3] = (_H[3] + d) | 0;\r\n    _H[4] = (_H[4] + e) | 0;\r\n    _H[5] = (_H[5] + f) | 0;\r\n    _H[6] = (_H[6] + g) | 0;\r\n    _H[7] = (_H[7] + h) | 0;\r\n  }\r\n\r\n  _doFinalize() {\r\n    // Shortcuts\r\n    const data = this._data;\r\n    const dataWords = data.words;\r\n\r\n    const nBitsTotal = this._nDataBytes * 8;\r\n    const nBitsLeft = data.sigBytes * 8;\r\n\r\n    // Add padding\r\n    dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - (nBitsLeft % 32));\r\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n    dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n    data.sigBytes = dataWords.length * 4;\r\n\r\n    // Hash final blocks\r\n    this._process();\r\n\r\n    // Return final computed hash\r\n    return this._hash;\r\n  }\r\n\r\n  clone() {\r\n    const clone = super.clone.call(this);\r\n    clone._hash = this._hash.clone();\r\n\r\n    return clone;\r\n  }\r\n}\r\n\r\n/**\r\n * Shortcut function to the hasher's object interface.\r\n *\r\n * @param {WordArray|string} message The message to hash.\r\n *\r\n * @return {WordArray} The hash.\r\n *\r\n * @static\r\n *\r\n * @example\r\n *\r\n *     var hash = CryptoJS.SHA256('message');\r\n *     var hash = CryptoJS.SHA256(wordArray);\r\n */\r\nexport const SHA256 = Hasher._createHelper(SHA256Algo);\r\n\r\n/**\r\n * Shortcut function to the HMAC's object interface.\r\n *\r\n * @param {WordArray|string} message The message to hash.\r\n * @param {WordArray|string} key The secret key.\r\n *\r\n * @return {WordArray} The HMAC.\r\n *\r\n * @static\r\n *\r\n * @example\r\n *\r\n *     var hmac = CryptoJS.HmacSHA256(message, key);\r\n */\r\nexport const HmacSHA256 = Hasher._createHmacHelper(SHA256Algo);\r\n"]},"metadata":{},"sourceType":"module"}