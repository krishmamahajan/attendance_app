{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/construct\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar Base = function () {\n  function Base() {\n    _classCallCheck(this, Base);\n  }\n\n  _createClass(Base, [{\n    key: \"mixIn\",\n    value: function mixIn(properties) {\n      return _extends(this, properties);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new this.constructor();\n\n      _extends(clone, this);\n\n      return clone;\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _construct(this, args);\n    }\n  }]);\n\n  return Base;\n}();\n\nexport { Base as default };","map":{"version":3,"sources":["D:/Krishma_other_pc/react-native_attendance_app/node_modules/react-native-hash/JSHash/lib/core/Base.js"],"names":["Base","properties","clone","constructor","args"],"mappings":";;;;;IAMqBA,I;;;;;;;0BAwBbC,U,EAAY;AAChB,aAAO,SAAc,IAAd,EAAoBA,UAApB,CAAP;AACD;;;4BAWO;AACN,UAAMC,KAAK,GAAG,IAAI,KAAKC,WAAT,EAAd;;AACA,eAAcD,KAAd,EAAqB,IAArB;;AACA,aAAOA,KAAP;AACD;;;6BAhCsB;AAAA,wCAANE,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACrB,wBAAW,IAAX,EAAmBA,IAAnB;AACD;;;;;;SAXkBJ,I","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\n/**\r\n * Base class for inheritance.\r\n */\r\nexport default class Base {\r\n  /**\r\n       * Extends this object and runs the init method.\r\n       * Arguments to create() will be passed to init().\r\n       * @return {Object} The new object.\r\n       * @static\r\n       * @example\r\n       *     var instance = MyType.create()\r\n       */\r\n  static create(...args) {\r\n    return new this(...args);\r\n  }\r\n\r\n  /**\r\n       * Copies properties into this object.\r\n       *\r\n       * @param {Object} properties The properties to mix in.\r\n       *\r\n       * @example\r\n       *\r\n       *     MyType.mixIn({\r\n       *         field: 'value'\r\n       *     })\r\n       */\r\n  mixIn(properties) {\r\n    return Object.assign(this, properties);\r\n  }\r\n\r\n  /**\r\n       * Creates a copy of this object.\r\n       *\r\n       * @return {Object} The clone.\r\n       *\r\n       * @example\r\n       *\r\n       *     var clone = instance.clone()\r\n       */\r\n  clone() {\r\n    const clone = new this.constructor();\r\n    Object.assign(clone, this);\r\n    return clone;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}