{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Base from \"./Base.js\";\nimport BufferedBlockAlgorithm from \"./BufferedBlockAlgorithm.js\";\nimport HMAC from \"./HMAC.js\";\n\nvar Hasher = function (_BufferedBlockAlgorit) {\n  _inherits(Hasher, _BufferedBlockAlgorit);\n\n  var _super = _createSuper(Hasher);\n\n  function Hasher(cfg) {\n    var _this;\n\n    _classCallCheck(this, Hasher);\n\n    _this = _super.call(this);\n    _this.blockSize = 512 / 32;\n    _this.cfg = _extends(new Base(), cfg);\n\n    _this.reset();\n\n    return _this;\n  }\n\n  _createClass(Hasher, [{\n    key: \"reset\",\n    value: function reset() {\n      _get(_getPrototypeOf(Hasher.prototype), \"reset\", this).call(this);\n\n      this._doReset();\n    }\n  }, {\n    key: \"update\",\n    value: function update(messageUpdate) {\n      this._append(messageUpdate);\n\n      this._process();\n\n      return this;\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize(messageUpdate) {\n      if (messageUpdate) {\n        this._append(messageUpdate);\n      }\n\n      var hash = this._doFinalize();\n\n      return hash;\n    }\n  }], [{\n    key: \"_createHelper\",\n    value: function _createHelper(SubHasher) {\n      return function (message, cfg) {\n        return new SubHasher(cfg).finalize(message);\n      };\n    }\n  }, {\n    key: \"_createHmacHelper\",\n    value: function _createHmacHelper(SubHasher) {\n      return function (message, key) {\n        return new HMAC(SubHasher, key).finalize(message);\n      };\n    }\n  }]);\n\n  return Hasher;\n}(BufferedBlockAlgorithm);\n\nexport { Hasher as default };","map":{"version":3,"sources":["D:/Krishma_other_pc/react-native_attendance_with_navigation-master/node_modules/react-native-hash/JSHash/lib/core/Hasher.js"],"names":["Base","BufferedBlockAlgorithm","HMAC","Hasher","cfg","blockSize","reset","call","_doReset","messageUpdate","_append","_process","hash","_doFinalize","SubHasher","message","finalize","key"],"mappings":";;;;;;;;;;;;AAGA,OAAOA,IAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,IAAP;;IASqBC,M;;;;;AACnB,kBAAYC,GAAZ,EAAiB;AAAA;;AAAA;;AACf;AAEA,UAAKC,SAAL,GAAiB,MAAM,EAAvB;AAKA,UAAKD,GAAL,GAAW,SAAc,IAAIJ,IAAJ,EAAd,EAA0BI,GAA1B,CAAX;;AAGA,UAAKE,KAAL;;AAXe;AAYhB;;;;4BA2CO;AAEN,6DAAYC,IAAZ,CAAiB,IAAjB;;AAGA,WAAKC,QAAL;AACD;;;2BAcMC,a,EAAe;AAEpB,WAAKC,OAAL,CAAaD,aAAb;;AAGA,WAAKE,QAAL;;AAGA,aAAO,IAAP;AACD;;;6BAgBQF,a,EAAe;AAEtB,UAAIA,aAAJ,EAAmB;AACjB,aAAKC,OAAL,CAAaD,aAAb;AACD;;AAGD,UAAMG,IAAI,GAAG,KAAKC,WAAL,EAAb;;AAEA,aAAOD,IAAP;AACD;;;kCAnFoBE,S,EAAW;AAC9B,aAAO,UAACC,OAAD,EAAUX,GAAV;AAAA,eAAkB,IAAIU,SAAJ,CAAcV,GAAd,EAAmBY,QAAnB,CAA4BD,OAA5B,CAAlB;AAAA,OAAP;AACD;;;sCAewBD,S,EAAW;AAClC,aAAO,UAACC,OAAD,EAAUE,GAAV;AAAA,eAAkB,IAAIf,IAAJ,CAASY,SAAT,EAAoBG,GAApB,EAAyBD,QAAzB,CAAkCD,OAAlC,CAAlB;AAAA,OAAP;AACD;;;;EA/CiCd,sB;;SAAfE,M","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport Base from './Base.js';\r\nimport BufferedBlockAlgorithm from './BufferedBlockAlgorithm.js';\r\nimport HMAC from './HMAC.js';\r\n\r\n/**\r\n * Abstract hasher template.\r\n *\r\n * @property {number} blockSize\r\n *\r\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\r\n */\r\nexport default class Hasher extends BufferedBlockAlgorithm {\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.blockSize = 512 / 32;\r\n\r\n    /**\r\n       * Configuration options.\r\n       */\r\n    this.cfg = Object.assign(new Base(), cfg);\r\n\r\n    // Set initial values\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n     * Creates a shortcut function to a hasher's object interface.\r\n     *\r\n     * @param {Hasher} SubHasher The hasher to create a helper for.\r\n     *\r\n     * @return {Function} The shortcut function.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\r\n     */\r\n  static _createHelper(SubHasher) {\r\n    return (message, cfg) => new SubHasher(cfg).finalize(message);\r\n  }\r\n\r\n  /**\r\n     * Creates a shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\r\n     *\r\n     * @return {Function} The shortcut function.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\r\n     */\r\n  static _createHmacHelper(SubHasher) {\r\n    return (message, key) => new HMAC(SubHasher, key).finalize(message);\r\n  }\r\n\r\n  /**\r\n     * Resets this hasher to its initial state.\r\n     *\r\n     * @example\r\n     *\r\n     *     hasher.reset();\r\n     */\r\n  reset() {\r\n    // Reset data buffer\r\n    super.reset.call(this);\r\n\r\n    // Perform concrete-hasher logic\r\n    this._doReset();\r\n  }\r\n\r\n  /**\r\n     * Updates this hasher with a message.\r\n     *\r\n     * @param {WordArray|string} messageUpdate The message to append.\r\n     *\r\n     * @return {Hasher} This hasher.\r\n     *\r\n     * @example\r\n     *\r\n     *     hasher.update('message');\r\n     *     hasher.update(wordArray);\r\n     */\r\n  update(messageUpdate) {\r\n    // Append\r\n    this._append(messageUpdate);\r\n\r\n    // Update the hash\r\n    this._process();\r\n\r\n    // Chainable\r\n    return this;\r\n  }\r\n\r\n  /**\r\n     * Finalizes the hash computation.\r\n     * Note that the finalize operation is effectively a destructive, read-once operation.\r\n     *\r\n     * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = hasher.finalize();\r\n     *     var hash = hasher.finalize('message');\r\n     *     var hash = hasher.finalize(wordArray);\r\n     */\r\n  finalize(messageUpdate) {\r\n    // Final message update\r\n    if (messageUpdate) {\r\n      this._append(messageUpdate);\r\n    }\r\n\r\n    // Perform concrete-hasher logic\r\n    const hash = this._doFinalize();\r\n\r\n    return hash;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}