{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Hash from \"./lib/index.js\";\nvar MD5 = Hash.MD5,\n    SHA1 = Hash.SHA1,\n    SHA224 = Hash.SHA224,\n    SHA256 = Hash.SHA256,\n    SHA384 = Hash.SHA384,\n    SHA512 = Hash.SHA512,\n    SHA3 = Hash.SHA3,\n    Hex = Hash.format.Hex;\n\nvar hashString = function hashString(string, algorithm) {\n  var hash, _hash, _hash2, _hash3, _hash4, _hash5, _hash6;\n\n  return _regeneratorRuntime.async(function hashString$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = algorithm;\n          _context.next = _context.t0 === 'MD5' ? 3 : _context.t0 === 'SHA-1' ? 7 : _context.t0 === 'SHA-256' ? 11 : _context.t0 === 'SHA-224' ? 15 : _context.t0 === 'SHA-512' ? 19 : _context.t0 === 'SHA-384' ? 23 : _context.t0 === 'keccak' ? 27 : 31;\n          break;\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(MD5(string));\n\n        case 5:\n          hash = _context.sent;\n          return _context.abrupt(\"return\", Hex.stringify(hash));\n\n        case 7:\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(SHA1(string));\n\n        case 9:\n          _hash = _context.sent;\n          return _context.abrupt(\"return\", Hex.stringify(_hash));\n\n        case 11:\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(SHA256(string));\n\n        case 13:\n          _hash2 = _context.sent;\n          return _context.abrupt(\"return\", Hex.stringify(_hash2));\n\n        case 15:\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(SHA224(string));\n\n        case 17:\n          _hash3 = _context.sent;\n          return _context.abrupt(\"return\", Hex.stringify(_hash3));\n\n        case 19:\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(SHA512(string));\n\n        case 21:\n          _hash4 = _context.sent;\n          return _context.abrupt(\"return\", Hex.stringify(_hash4));\n\n        case 23:\n          _context.next = 25;\n          return _regeneratorRuntime.awrap(SHA384(string));\n\n        case 25:\n          _hash5 = _context.sent;\n          return _context.abrupt(\"return\", Hex.stringify(_hash5));\n\n        case 27:\n          _context.next = 29;\n          return _regeneratorRuntime.awrap(SHA3(string));\n\n        case 29:\n          _hash6 = _context.sent;\n          return _context.abrupt(\"return\", Hex.stringify(_hash6));\n\n        case 31:\n          throw new Error(algorithm + \" algorithm is not suported\");\n\n        case 32:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default hashString;","map":{"version":3,"sources":["D:/Krishma_other_pc/react-native_attendance_with_navigation-master/node_modules/react-native-hash/JSHash/JSHash.js"],"names":["Hash","MD5","SHA1","SHA224","SHA256","SHA384","SHA512","SHA3","Hex","format","hashString","string","algorithm","hash","stringify","Error"],"mappings":";AAGA,OAAOA,IAAP;IAGEC,G,GAQED,I,CARFC,G;IACAC,I,GAOEF,I,CAPFE,I;IACAC,M,GAMEH,I,CANFG,M;IACAC,M,GAKEJ,I,CALFI,M;IACAC,M,GAIEL,I,CAJFK,M;IACAC,M,GAGEN,I,CAHFM,M;IACAC,I,GAEEP,I,CAFFO,I;IACUC,G,GACRR,I,CADFS,M,CAAUD,G;;AAQZ,IAAME,UAAU,GAAG,SAAbA,UAAa,CAAOC,MAAP,EAAeC,SAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACTA,SADS;AAAA,0CAEV,KAFU,uBAMV,OANU,uBAUV,SAVU,wBAcV,SAdU,wBAkBV,SAlBU,wBAsBV,SAtBU,wBA0BV,QA1BU;AAAA;;AAAA;AAAA;AAAA,2CAGMX,GAAG,CAACU,MAAD,CAHT;;AAAA;AAGPE,UAAAA,IAHO;AAAA,2CAINL,GAAG,CAACM,SAAJ,CAAcD,IAAd,CAJM;;AAAA;AAAA;AAAA,2CAOMX,IAAI,CAACS,MAAD,CAPV;;AAAA;AAOPE,UAAAA,KAPO;AAAA,2CAQNL,GAAG,CAACM,SAAJ,CAAcD,KAAd,CARM;;AAAA;AAAA;AAAA,2CAWMT,MAAM,CAACO,MAAD,CAXZ;;AAAA;AAWPE,UAAAA,MAXO;AAAA,2CAYNL,GAAG,CAACM,SAAJ,CAAcD,MAAd,CAZM;;AAAA;AAAA;AAAA,2CAeMV,MAAM,CAACQ,MAAD,CAfZ;;AAAA;AAePE,UAAAA,MAfO;AAAA,2CAgBNL,GAAG,CAACM,SAAJ,CAAcD,MAAd,CAhBM;;AAAA;AAAA;AAAA,2CAmBMP,MAAM,CAACK,MAAD,CAnBZ;;AAAA;AAmBPE,UAAAA,MAnBO;AAAA,2CAoBNL,GAAG,CAACM,SAAJ,CAAcD,MAAd,CApBM;;AAAA;AAAA;AAAA,2CAuBMR,MAAM,CAACM,MAAD,CAvBZ;;AAAA;AAuBPE,UAAAA,MAvBO;AAAA,2CAwBNL,GAAG,CAACM,SAAJ,CAAcD,MAAd,CAxBM;;AAAA;AAAA;AAAA,2CA2BMN,IAAI,CAACI,MAAD,CA3BV;;AAAA;AA2BPE,UAAAA,MA3BO;AAAA,2CA4BNL,GAAG,CAACM,SAAJ,CAAcD,MAAd,CA5BM;;AAAA;AAAA,gBA+BP,IAAIE,KAAJ,CAAaH,SAAb,gCA/BO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAmCA,eAAeF,UAAf","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport Hash from './lib/index.js';\r\n\r\nconst {\r\n  MD5,\r\n  SHA1,\r\n  SHA224,\r\n  SHA256,\r\n  SHA384,\r\n  SHA512,\r\n  SHA3,\r\n  format: { Hex },\r\n} = Hash;\r\n\r\n/**\r\n *\r\n * @param {string} string\r\n * @param {string} algorithm\r\n */\r\nconst hashString = async (string, algorithm) => {\r\n  switch (algorithm) {\r\n    case 'MD5': {\r\n      const hash = await MD5(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'SHA-1': {\r\n      const hash = await SHA1(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'SHA-256': {\r\n      const hash = await SHA256(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'SHA-224': {\r\n      const hash = await SHA224(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'SHA-512': {\r\n      const hash = await SHA512(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'SHA-384': {\r\n      const hash = await SHA384(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    case 'keccak': {\r\n      const hash = await SHA3(string);\r\n      return Hex.stringify(hash);\r\n    }\r\n    default:\r\n      throw new Error(`${algorithm} algorithm is not suported`);\r\n  }\r\n};\r\n\r\nexport default hashString;\r\n"]},"metadata":{},"sourceType":"module"}