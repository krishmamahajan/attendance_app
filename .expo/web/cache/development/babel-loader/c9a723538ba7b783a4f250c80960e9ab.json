{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Krishma_other_pc\\\\react-native_attendance_app\\\\App\\\\Screens\\\\Student\\\\QR_Scan.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nexport default function qrscan(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === \"granted\");\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref2) {\n    var type = _ref2.type,\n        data = _ref2.data;\n    setScanned(true);\n    console.log(data);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: [StyleSheet.absoluteFill, styles.container],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.layerTop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.layerCenter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.layerLeft,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.focused,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.layerRight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: styles.layerBottom,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })), scanned && React.createElement(Button, {\n    title: \"Tap to Scan Again\",\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }));\n}\nvar opacity = \"rgba(0, 0, 0, .6)\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\"\n  },\n  layerTop: {\n    flex: 2,\n    backgroundColor: opacity\n  },\n  layerCenter: {\n    flex: 1,\n    flexDirection: \"row\"\n  },\n  layerLeft: {\n    flex: 1,\n    backgroundColor: opacity\n  },\n  focused: {\n    flex: 10\n  },\n  layerRight: {\n    flex: 1,\n    backgroundColor: opacity\n  },\n  layerBottom: {\n    flex: 2,\n    backgroundColor: opacity\n  }\n});","map":{"version":3,"sources":["D:/Krishma_other_pc/react-native_attendance_app/App/Screens/Student/QR_Scan.jsx"],"names":["React","useState","useEffect","BarCodeScanner","qrscan","navigation","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","console","log","alert","flex","undefined","StyleSheet","absoluteFill","styles","container","layerTop","layerCenter","layerLeft","focused","layerRight","layerBottom","opacity","create","flexDirection","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Text, View, StyleSheet, Button } from \"react-native\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\n\nexport default function qrscan({ navigation }) {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === \"granted\");\n    })();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    console.log(data);\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View\n      style={{\n        flex: 1,\n      }}\n    >\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={[StyleSheet.absoluteFill, styles.container]}\n      >\n        <View style={styles.layerTop} />\n        <View style={styles.layerCenter}>\n          <View style={styles.layerLeft} />\n          <View style={styles.focused} />\n          <View style={styles.layerRight} />\n        </View>\n        <View style={styles.layerBottom} />\n      </BarCodeScanner>\n\n      {scanned && (\n        <Button title={\"Tap to Scan Again\"} onPress={() => setScanned(false)} />\n      )}\n    </View>\n  );\n}\nconst opacity = \"rgba(0, 0, 0, .6)\";\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n  },\n  layerTop: {\n    flex: 2,\n    backgroundColor: opacity,\n  },\n  layerCenter: {\n    flex: 1,\n    flexDirection: \"row\",\n  },\n  layerLeft: {\n    flex: 1,\n    backgroundColor: opacity,\n  },\n  focused: {\n    flex: 10,\n  },\n  layerRight: {\n    flex: 1,\n    backgroundColor: opacity,\n  },\n  layerBottom: {\n    flex: 2,\n    backgroundColor: opacity,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}