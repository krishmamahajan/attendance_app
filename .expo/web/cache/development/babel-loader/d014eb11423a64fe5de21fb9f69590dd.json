{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Base from \"./Base.js\";\n\nvar CipherParams = function (_Base) {\n  _inherits(CipherParams, _Base);\n\n  var _super = _createSuper(CipherParams);\n\n  function CipherParams(cipherParams) {\n    var _this;\n\n    _classCallCheck(this, CipherParams);\n\n    _this = _super.call(this);\n\n    _this.mixIn(cipherParams);\n\n    return _this;\n  }\n\n  _createClass(CipherParams, [{\n    key: \"toString\",\n    value: function toString(formatter) {\n      return (formatter || this.formatter).stringify(this);\n    }\n  }]);\n\n  return CipherParams;\n}(Base);\n\nexport { CipherParams as default };","map":{"version":3,"sources":["D:/Krishma_other_pc/react-native_attendance_with_navigation-master/node_modules/react-native-hash/JSHash/lib/core/CipherParams.js"],"names":["Base","CipherParams","cipherParams","mixIn","formatter","stringify"],"mappings":";;;;;;;;;;AAGA,OAAOA,IAAP;;IAgBqBC,Y;;;;;AAoBnB,wBAAYC,YAAZ,EAA0B;AAAA;;AAAA;;AACxB;;AAEA,UAAKC,KAAL,CAAWD,YAAX;;AAHwB;AAIzB;;;;6BAiBQE,S,EAAW;AAClB,aAAO,CAACA,SAAS,IAAI,KAAKA,SAAnB,EAA8BC,SAA9B,CAAwC,IAAxC,CAAP;AACD;;;;EA3CuCL,I;;SAArBC,Y","sourcesContent":["/* eslint linebreak-style: [\"error\", \"windows\"] */\r\n/* eslint-disable no-use-before-define */\r\n\r\nimport Base from './Base.js';\r\n\r\n/**\r\n * A collection of cipher parameters.\r\n *\r\n * @property {WordArray} ciphertext The raw ciphertext.\r\n * @property {WordArray} key The key to this ciphertext.\r\n * @property {WordArray} iv The IV used in the ciphering operation.\r\n * @property {WordArray} salt The salt used with a key derivation function.\r\n * @property {Cipher} algorithm The cipher algorithm.\r\n * @property {Mode} mode The block mode used in the ciphering operation.\r\n * @property {Padding} padding The padding scheme used in the ciphering operation.\r\n * @property {number} blockSize The block size of the cipher.\r\n * @property {Format} formatter\r\n *    The default formatting strategy to convert this cipher params object to a string.\r\n */\r\nexport default class CipherParams extends Base {\r\n  /**\r\n     * Initializes a newly created cipher params object.\r\n     *\r\n     * @param {Object} cipherParams An object with any of the possible cipher parameters.\r\n     *\r\n     * @example\r\n     *\r\n     *     var cipherParams = CryptoJS.lib.CipherParams.create({\r\n     *         ciphertext: ciphertextWordArray,\r\n     *         key: keyWordArray,\r\n     *         iv: ivWordArray,\r\n     *         salt: saltWordArray,\r\n     *         algorithm: CryptoJS.algo.AES,\r\n     *         mode: CryptoJS.mode.CBC,\r\n     *         padding: CryptoJS.pad.PKCS7,\r\n     *         blockSize: 4,\r\n     *         formatter: CryptoJS.format.OpenSSL\r\n     *     });\r\n     */\r\n  constructor(cipherParams) {\r\n    super();\r\n\r\n    this.mixIn(cipherParams);\r\n  }\r\n\r\n  /**\r\n     * Converts this cipher params object to a string.\r\n     *\r\n     * @param {Format} formatter (Optional) The formatting strategy to use.\r\n     *\r\n     * @return {string} The stringified cipher params.\r\n     *\r\n     * @throws Error If neither the formatter nor the default formatter is set.\r\n     *\r\n     * @example\r\n     *\r\n     *     var string = cipherParams + '';\r\n     *     var string = cipherParams.toString();\r\n     *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\r\n     */\r\n  toString(formatter) {\r\n    return (formatter || this.formatter).stringify(this);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}